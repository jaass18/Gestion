<?php/** * XtraUpload * * A turn-key open source web 2.0 PHP file uploading package requiring PHP v5 * * @package		XtraUpload * @author		Matthew Glinski * @copyright	Copyright (c) 2006, XtraFile.com * @license		http://xtrafile.com/docs/license * @link		http://xtrafile.com * @since		Version 2.0 * @filesource */// ------------------------------------------------------------------------/** * XtraUpload Files Page Controller * * @package		XtraUpload * @subpackage	Controllers * @category	Controllers * @author		Matthew Glinski * @link		http://xtrafile.com/docs/pages/files */// ------------------------------------------------------------------------class Files extends Controller {	// Lets the files->downloadFail() function know if the download completed	private $downloadComplete = false;		public function Files()	{		parent::Controller();			$this->lang->load('files');	}		// ------------------------------------------------------------------------		/**	 * Files->get()	 *	 * The file download geteway page, file info, wait time, and captcha test are served here	 *	 * @access	public	 * @param	string	 * @param	string	 * @param	string	 * @return	none	 */	 public function index()	 {	 	redirect('home');	 }		// ------------------------------------------------------------------------		/**	 * Files->download()	 *	 * Download file if a download link was generated	 *	 * @access	public	 * @return	none	 */	public function download($dlink, $name='')	{		// did user submit WWW_basic-auth params?		$this->_checkForHTTPAuth();				$down_link = $this->db->select('time, ip, fid')->get_where('dlinks', array('id' => $dlink));				// Download link does not exists		if($down_link->num_rows() != 1)		{			$this->_send404();			exit();		}				// get dlink object		$dl = $down_link->row();				// File link expired		if($dl->time < time())		{			$this->db->delete('dlinks', array('id' => $dlink));			$this->_send404();			exit();		}				// Not the same user		if($dl->ip != $this->input->ip_address())		{			$this->db->delete('dlinks', array('id' => $dlink));			$this->_send404();			exit();		}				// Send file data and headers to the browser		$this->_download($dl->fid);	}		// ------------------------------------------------------------------------		/**	 * Files->stream()	 *	 * Stream a file for playback, mp3's are currently only supported	 *	 * @access	public	 * @return	none	 */	public function stream($fid='', $enc='')	{		$file = $this->files_db->getFileObject($fid);		if(!$file)		{			show_404();			}				if($enc != md5($this->config->config['encryption_key'].$fid.$this->input->ip_address()))		{			show_404();		}				// get server manager		$this->load->model('server/server_db');				// let the embed definition see if we can stream, and describe the file transfer speed limit		$code = $this->xu_api->embed->getEmbedCode($file->type);		if(is_array($code))		{			$serv = $this->server_db->getServerForDownload($file);						if($serv != base_url())			{				header("Location: ".$serv.implode('/', $this->uri->segment_array()));				exit;			}						$this->_download($file->file_id, $code['speed']);		}		else		{			show_404();		}	}		// ------------------------------------------------------------------------		public function old_redirect()	{		$id = $this->uri->segment(2);		$name = $this->uri->segment(3);				if($name) 		{			redirect('files/get/'.$id.'/'.url_title($name));		}		else		{			redirect('files/get/'.$id);		}	}		// ------------------------------------------------------------------------	/**	 * Files->_download()	 *	 * File Download private function	 *	 * @access	private	 * @param	string	 * @return	none	 */	private function _download($id, $speed=0)	{		// Get the file refrence		$file = $this->files_db->_getFileObject($id, 'file_id, filename, o_filename, size, direct');						// Increment the file downloa count		$this->files_db->addToDownloads($file->file_id);				// If file exists, send download		if($file)		{			// Load the custom file download library			$this->load->library('filedownload');						// Function to call if user aborts connection during download			register_shutdown_function(array('Files', '_downloadFail'), $file);						// Setup config for file download			$config = array();			$config['file'] = $file->filename;			$config['resume'] = true;			$config['filename'] = $file->o_filename;			$config['speed'] = intval($this->startup->group_config->speed_limit);						if($speed)			{				$config['speed'] = $speed;			}						// Send the actual file			$bandwidth = $this->filedownload->send_download($config);		}	}		// ------------------------------------------------------------------------		/**	 * Files->_downloadFail()	 *	 * Function called if the user aborts the connection prematurely	 *	 * @access	public	 * @param	string	 * @param	string	 * @param	string	 * @return	none	 */	public function _downloadFail($file)	{		$this1 =& get_instance();		$data = array(			'file_id' 	=> $file->file_id,			'user' 		=> $this1->session->userdata('id'),			'ip' 		=> $this1->input->ip_address(),			'size' 		=> $file->size,			'sent' 		=> $this1->filedownload->bandwidth,			'time' 		=> time()		);				if($file->direct and !$this1->startup->group_config->auto_download)		{			$this1->files_db->editPremiumBandwith($file->file_id, $dl_obj->bandwidth);		}				$this1->db->insert('downloads', $data);	}		// ------------------------------------------------------------------------		/**	 * Files->_checkForHTTPAuth()	 *	 * Login user if they send login info using basic-auth, mostly for download accelerators	 *	 * @access	public	 * @param	string	 * @param	bool	 * @return	none	 */	public function _checkForHTTPAuth()	{		if (!isset($_SERVER['PHP_AUTH_USER'])) 		{			return;		} 		else 		{			$user = $_SERVER['PHP_AUTH_USER'];			$pass = $_SERVER['PHP_AUTH_PW'];			if($this->users->processLogin($user, $pass))			{				$this->startup->getGroup();				return;			}		}	}}